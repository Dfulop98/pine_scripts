// =================================================================================================
// dobofulop
// =================================================================================================

//@version=6
indicator(
     title="Fib Golden Wave + VWAP Divergence + RSI (Kernel Optimized)",
     overlay=true,
     max_boxes_count=500,
     max_labels_count=500,
     max_lines_count=500,
     max_bars_back=5000)

// ------------------------------------------------------------------------------------------------
// === [A] GLOBÁLIS DEBUG & KONSTANSOK (mindhárom scriptből) ===
// ------------------------------------------------------------------------------------------------
const bool DEBUG = false
const int labelCooldown = 8
const int maxDistanceToLastBar = 5000
const int KDELimit = 300

// ------------------------------------------------------------------------------------------------
// === [B] FIBONACCI GOLDEN WAVE EREDETI KÓD ===
// ------------------------------------------------------------------------------------------------

// -- Inputs
int pivotRange           = input.int(20, "Swing Range", group="Fib Wave - General")
bool usePivots           = DEBUG ? input.bool(false, "Use Pivots", group="Fib Wave - General") : false
float fibArea1           = input.float(0.5, "", options=[0.236,0.382,0.5,0.618,0.786], group="Golden Zone", inline="zone")
float fibArea2           = input.float(0.618," - ", options=[0.236,0.382,0.5,0.618,0.786], group="Golden Zone", inline="zone")
color gzLineColor        = input.color(color.new(color.yellow,80),"Golden Zone Lines",group="Fib Wave - Style")
bool showArea            = input.bool(true,"Show Area",group="Fib Wave - Style",inline="area")
color gzAreaColor        = input.color(color.new(color.yellow,90),"",group="Fib Wave - Style",inline="area")
string textSizeFib       = input.string("Normal","Text Size",options=["Auto","Small","Normal"],group="Fib Wave - Style",inline="text")
color textColorFib       = input.color(color.new(color.white,30),"",group="Fib Wave - Style",inline="text")

// -- Típus pivot
type pivot
    bool  isHigh
    float price
    int   barTime

// -- Változók
var pivot[] highPivots = array.new<pivot>(0)
var pivot[] lowPivots  = array.new<pivot>(0)
var box tf1Text        = na
float pivotHigh         = na
float pivotLow          = na
int pHighTime           = na
int pLowTime            = na

// Fib wave pivot kiszámítása
if not usePivots
    pivotHigh := ta.highest(high,pivotRange)
    pHighTime := time[math.abs(ta.highestbars(high,pivotRange))]
    pivotLow  := ta.lowest(low,pivotRange)
    pLowTime  := time[math.abs(ta.lowestbars(low,pivotRange))]
else
    pivotHigh := ta.pivothigh(pivotRange,pivotRange)
    pHighTime := time[pivotRange]
    pivotLow  := ta.pivotlow(pivotRange,pivotRange)
    pLowTime  := time[pivotRange]

if not na(pivotHigh)
    highPivots.unshift(pivot.new(true, pivotHigh, pHighTime))
    if highPivots.size()>10
        highPivots.pop()

if not na(pivotLow)
    lowPivots.unshift(pivot.new(false, pivotLow, pLowTime))
    if lowPivots.size()>10
        lowPivots.pop()

f_formatTimeframeString(tf)=>
    timeframeF = tf=="" ? timeframe.period : tf
    if str.contains(timeframeF,"D") or str.contains(timeframeF,"W") or str.contains(timeframeF,"S") or str.contains(timeframeF,"M")
        timeframeF
    else
        seconds = timeframe.in_seconds(timeframeF)
        if seconds>=3600
            hourCount = int(seconds/3600)
            str.tostring(hourCount)+" Hour"+(hourCount>1?"s":"")
        else
            timeframeF+" Min"

f_getFibonacciLevels(f1,f2)=>
    if highPivots.size()>0 and lowPivots.size()>0
        pivot hiP = highPivots.get(0)
        pivot loP = lowPivots.get(0)
        float top  = hiP.price
        float bot  = loP.price
        float diff = top - bot
        float fib050 = top - (diff*f1)
        float fib061 = top - (diff*f2)
        [fib050,fib061]
    else
        [na,na]

float fib1   = fibArea1
float fib2   = fibArea2

[fib05,fib061] = f_getFibonacciLevels(fib1,fib2)
fill(plot(fib05,color=gzLineColor,linewidth=1,style=plot.style_line),plot(fib061,color=gzLineColor,linewidth=1,style=plot.style_line),color=showArea?gzAreaColor:na)

if barstate.islast
    box.delete(tf1Text)

// ------------------------------------------------------------------------------------------------
// === [C] VWAP DIVERGENCE EREDETI KÓD ===
// ------------------------------------------------------------------------------------------------

// -- Inputs
bool hideonDWM = input.bool(false,"Hide VWAP on 1D or Above",group="VWAP Settings")
int divergenceLookback = input.int(5,"Lookback Period",group="VWAP Divergence",tooltip="How long the lookback for divergences")
float divergenceATRmultiplier = input.float(3,"ATR Multiplier",group="VWAP Divergence",tooltip="ATR multiplier for divergences",step=0.1)

// Eredetiben 'bearishColor','bullishColor' => 
color bearishColorVWAP = input.color(color.red,"VWAP down color",group="VWAP Visual",inline="col")
color bullishColorVWAP = input.color(color.lime,"VWAP up color",group="VWAP Visual",inline="col")
bool alternateColor = input.bool(true,"Trend Coloring",group="VWAP Visual",tooltip="Red/Green VWAP coloring?")
bool showVWAP       = input.bool(true,"Show VWAP",group="VWAP Visual")

string divergence_plot_size_input = input.string("Normal","Divergence Plot Size",options=["Small","Normal","Large"],group="VWAP Visual")
int divergence_plot_size = divergence_plot_size_input=="Small"?3:divergence_plot_size_input=="Normal"?5:7

var anchor = input.string("Session","Anchor Period",options=["Session","Week","Month","Quarter","Year","Decade","Century","Earnings","Dividends","Splits"],group="VWAP Settings")
var src    = input.source(hlc3,"Source",group="VWAP Settings")
int offset = input.int(0,"Offset",group="VWAP Settings")

bool bearishAlertSignal = input.bool(true,"Bearish divergence alerts",group="VWAP Alerts",inline="Alert Confirmations")
bool bullishAlertSignal = input.bool(true,"Bullish divergence alerts",group="VWAP Alerts",inline="Alert Confirmations")

// Példa: A cumVol változót már minden baron kiszámoljuk
float cumVol = ta.cum(volume)

// Ezután a feltételben használjuk a mentett értéket
if barstate.islast and cumVol == 0
    runtime.error("No volume is provided by the data vendor.")

float vwapValue=na
float stdevAbs=na

var lastBullishDivergence = bar_index
var lastBearishDivergence = bar_index

float pivotHighVWAP=na // Csak a logikai különbség
float pivotLowVWAP=na
int pivotTimeHigh=na
int pivotTimeLow=na

// Eredeti request
var earningsData   = request.earnings(syminfo.tickerid, earnings.actual, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol=true)
var dividendsData  = request.dividends(syminfo.tickerid, dividends.gross, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol=true)
var splitsData     = request.splits(syminfo.tickerid, splits.denominator, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol=true)

// Eredeti anchor detection
bool isNewPeriod = switch anchor
    "Earnings"  => not na(earningsData)
    "Dividends" => not na(dividendsData)
    "Splits"    => not na(splitsData)
    "Session"   => timeframe.change("D")
    "Week"      => timeframe.change("W")
    "Month"     => timeframe.change("M")
    "Quarter"   => timeframe.change("3M")
    "Year"      => timeframe.change("12M")
    "Decade"    => timeframe.change("12M") and year%10==0
    "Century"   => timeframe.change("12M") and year%100==0
    => false

bool isEsdAnchor = anchor=="Earnings" or anchor=="Dividends" or anchor=="Splits"
if na(src[1]) and not isEsdAnchor
    isNewPeriod := true

if not (hideonDWM and timeframe.isdwm)
    [vw_local, stdev_local, dummy_local] = ta.vwap(src, isNewPeriod, 1)
    vwapValue := vw_local
    stdevAbs  := stdev_local - vw_local

// Eredeti plot a VWAP-nál (színezés)
plot(vwapValue,
     title="VWAP",
     color= showVWAP?(alternateColor? (vwapValue>vwapValue[1]? #00ff0d : #ff0000) : #ffffff):na,
     offset=offset,
     linewidth=2)

// Divergence
float last5gain = high - low[divergenceLookback]
float last5loss = high[divergenceLookback] - low
float atrVwapDiv= ta.atr(14)

// gaps
bool gaps=false
for i=0 to divergenceLookback
    if math.abs(open[i]-close[i+1])>atrVwapDiv
        gaps := true

float highestVal = ta.highest(high, 20)
float lowestVal  = ta.lowest(low, 20)
bool bullishDivergenceBool = close>close[1] and vwapValue<vwapValue[1] and last5gain>atrVwapDiv*divergenceATRmultiplier and ((bar_index-lastBullishDivergence>15) or (highestVal-lowestVal>atrVwapDiv*2 and bar_index-lastBullishDivergence>10))
if gaps
    bullishDivergenceBool:=false

if bullishDivergenceBool and bullishAlertSignal
    alert("Bullish VWAP Divergence",freq=alert.freq_once_per_bar_close)

plot(bullishDivergenceBool? low - atrVwapDiv*0.5 : na,
     style=plot.style_circles,
     color=bullishColorVWAP,
     linewidth=7,
     title="Bullish Divergence Dot")
if bullishDivergenceBool
    lastBullishDivergence:=bar_index

bool bearishDivergenceBool = close<close[1] and vwapValue>vwapValue[1] and last5loss>atrVwapDiv*divergenceATRmultiplier and ((bar_index-lastBearishDivergence>15) or(highestVal-lowestVal>atrVwapDiv*2 and bar_index-lastBearishDivergence>10))

if gaps
    bearishDivergenceBool:=false

if bearishDivergenceBool and bearishAlertSignal
    alert("Bearish VWAP Divergence",freq=alert.freq_once_per_bar_close)

plot(bearishDivergenceBool? high + atrVwapDiv*0.5 : na,
     style=plot.style_circles,
     color=bearishColorVWAP,
     linewidth=divergence_plot_size,
     title="Bearish Divergence Dot")
if bearishDivergenceBool
    lastBearishDivergence:=bar_index

// ------------------------------------------------------------------------------------------------
// === [D] RSI (Kernel Optimized) — EREDETI KÓD ===
// ------------------------------------------------------------------------------------------------

// -- RSI inputok
int rsiLengthInput = input.int(14,minval=1,title="RSI Length",group="RSI Settings")
var rsiSourceInput = input.source(close,"Source",group="RSI Settings")

int highPivotLen = input.int(21,"High Pivot Length",minval=1,group="RSI Pivots",display=display.none)
int lowPivotLen  = input.int(21,"Low Pivot Length",minval=1,group="RSI Pivots",display=display.none)
bool realPivotLabels = DEBUG? input.bool(false,"[DBG] Real Pivot Labels",group="RSI Pivots"): false
bool kdePivotLabels  = DEBUG? input.bool(false,"[DBG] KDE Pivot Labels",group="RSI Pivots"): false

string activationThresholdStr = input.string("Medium","Activation Threshold",options=["High","Medium","Low"],group="KDE",tooltip="Divergence arrow freq: High => more")
string KDEKernel = input.string("Gaussian","Kernel",options=["Uniform","Gaussian","Sigmoid"],group="KDE",tooltip="Kernel function for KDE calc.")
float KDEBandwidth = input.float(2.71828,"Bandwidth",group="KDE",tooltip="Smoothness of the KDE function.")
int KDEStep = input.int(100,"Nº Bins",minval=1,group="KDE",tooltip="Number of elements in KDE Probability array.")
float activationThreshold= DEBUG? input.float(0.25,"[DBG] Activation Threshold",group="KDE"):0.25
if not DEBUG
    activationThreshold := activationThresholdStr=="High"?0.4:activationThresholdStr=="Medium"?0.25:0.15
string probMode = DEBUG? input.string("Sum","[DBG] Probability Mode",options=["Sum","Nearest"],group="KDE") : "Sum"
bool minPadding = DEBUG? input.bool(false,"[DBG] KDE Min Padding",group="KDE"): false

bool tableEnabled = input.bool(true,"Dashboard",group="Dashboard",display=display.none)
string tableLocation = input.string("Top Right","Position",options=["Top Right","Top Center","Right Center","Middle Center","Left Center","Bottom Center"],group="Dashboard",display=display.none)
color screenerColor = input.color(#1B1F2B,"Background",group="Dashboard",display=display.none)
color frameColor    = input.color(color.rgb(255,255,255),"Frame",group="Dashboard",display=display.none)
color borderColor   = input.color(color.rgb(255,255,255),"Border",group="Dashboard",display=display.none)
color textColorDB   = input.color(color.white,"Text",group="Dashboard",display=display.none)
bool fillBackgrounds= input.bool(true,"Fill Backgrounds",group="Dashboard",display=display.none)

// RSI stílus
color bearishColorRSI = input.color(#f23646,"High Pivots",group="RSI Style",inline="col",display=display.none)
color neutralColorRSI = input.color(color.gray,"Neutral",group="RSI Style",inline="col",display=display.none)
color bullishColorRSI = input.color(#089981,"Low Pivots",group="RSI Style",inline="col",display=display.none)
color textColorRSI    = input.color(color.white,"Text",group="RSI Style",inline="col",display=display.none)
bool RSILabelsEnabled = input.bool(true,"RSI Labels",group="RSI Style")
bool KDELabelsEnabled = input.bool(true,"KDE Labels",group="RSI Style")

// RSI kiszámítása
float rsi = ta.rsi(rsiSourceInput,rsiLengthInput)

// Pozíció meghatározása a dashboardnak
f_getPosition(posTxt) => posTxt=="Top Right"?position.top_right:posTxt=="Top Center"?position.top_center:posTxt=="Right Center"?position.middle_right:posTxt=="Left Center"?position.middle_left:posTxt=="Bottom Center"?position.bottom_center:posTxt=="Middle Center"?position.middle_center:position.top_right


// --- Kernel Fv-k
f_gaussian(float distance,float bandwidth=1.0)=> 1.0/math.sqrt(2.0*math.pi)*math.pow(math.e,-0.5*math.pow(distance/bandwidth,2.0))
f_uniform (float distance,float bandwidth=1.0)=> math.abs(distance)>bandwidth?0.0:0.5
f_sigmoid (float distance,float bandwidth=1.0)=> 2.0/math.pi*(1.0/(math.pow(math.e,(distance/bandwidth))+math.pow(math.e,(-(distance/bandwidth)))))

// KDE
f_kde(array<float> arr,string kernel,float bandwidth,int steps)=>
    int arrSize = arr.size()
    float arrRange=arr.range()
    float arrMin=arr.min()-(minPadding?(arrRange/2.0):0)
    float stepCount=arrRange/steps
    array<float> densityRange=array.new<float>(steps*2)
    for i=0 to (steps*2)-1
        densityRange.set(i,arrMin+i*stepCount)

    array<float> xArr=array.new<float>()
    array<float> yArr=array.new<float>()

    for i=0 to densityRange.size()-1
        float temp=0
        for j=0 to arr.size()-1
            switch KDEKernel
                "Gaussian"=> temp+=f_gaussian(densityRange.get(i)-arr.get(j),1.0/bandwidth)
                "Uniform"=>  temp+=f_uniform(densityRange.get(i)-arr.get(j),1.0/bandwidth)
                "Sigmoid"=>  temp+=f_sigmoid(densityRange.get(i)-arr.get(j),1.0/bandwidth)
        xArr.push(densityRange.get(i))
        yArr.push(1.0/arrSize*temp)

    [xArr,yArr]

// Pivots
prefixSum(array<float> arr,int l,int r)=>
    arr.get(r)-(l==0?0:arr.get(l-1))

float MidKDEHigh=na
float MidKDELow=na

var array<float> KDEHighX=na
var array<float> KDEHighY=na
var array<float> KDEHighYSum=array.new<float>()
var array<float> KDELowX=na
var array<float> KDELowY=na
var array<float> KDELowYSum=array.new<float>()

float highPivot= ta.pivothigh(highPivotLen,highPivotLen)
float lowPivot = ta.pivotlow(lowPivotLen,lowPivotLen)

var array<float> highPivotRSIs=array.new<float>()
var array<float> lowPivotRSIs =array.new<float>()


if not na(highPivot)
    if highPivotRSIs.size()>KDELimit
        highPivotRSIs.remove(0)
    highPivotRSIs.push(rsi[highPivotLen])

    [KDEHighX1, KDEHighY1] = f_kde(highPivotRSIs, KDEKernel, KDEBandwidth, KDEStep)
    KDEHighX:=KDEHighX1
    KDEHighY:=KDEHighY1

    KDEHighYSum.clear()
    float temp=0.0
    for i=0 to KDEHighY.size()-1
        temp+=KDEHighY.get(i)
        KDEHighYSum.push(temp)
    MidKDEHigh:= array.get(KDEHighX,array.indexof(KDEHighY,array.max(KDEHighY)))



if not na(lowPivot)
    if lowPivotRSIs.size()>KDELimit
        lowPivotRSIs.remove(0)
    lowPivotRSIs.push(rsi[lowPivotLen])

    [KDELowX1, KDELowY1] = f_kde(lowPivotRSIs, KDEKernel, KDEBandwidth, KDEStep)
    KDELowX := KDELowX1
    KDELowY := KDELowY1

    KDELowYSum.clear()
    float temp2=0.0
    for i=0 to KDELowY.size()-1
        temp2+=KDELowY.get(i)
        KDELowYSum.push(temp2)
    MidKDELow:= array.get(KDELowX,array.indexof(KDELowY,array.max(KDELowY)))

// KDE Opt
f_lin_interpolate(float x0,float x1,float y0,float y1,float x)=>
    y0+(x-x0)*(y1-y0)/(x1-x0)

float lowProb=na
float maxLowProb=na
float highProb=na
float maxHighProb=na

if last_bar_index - maxDistanceToLastBar < bar_index
    if highPivotRSIs.size()>0
        int highXIndexL=array.binary_search_leftmost(KDEHighX,rsi)
        int highXIndexR=math.min(array.binary_search_rightmost(KDEHighX,rsi),KDEHighX.size()-1)
        int nearestIndex=(math.abs(rsi - KDEHighX.get(highXIndexL))<math.abs(rsi - KDEHighX.get(highXIndexR)))? highXIndexL: highXIndexR
        if probMode=="Nearest"
            highProb   := KDEHighY.get(nearestIndex)
            maxHighProb := array.max(KDEHighY)
        else
            highProb   := prefixSum(KDEHighYSum,0,nearestIndex)

    if lowPivotRSIs.size()>0
        int lowXIndexL=array.binary_search_leftmost(KDELowX,rsi)
        int lowXIndexR=math.min(array.binary_search_rightmost(KDELowX,rsi),KDELowX.size()-1)
        int nearestIndex2=(math.abs(rsi - KDELowX.get(lowXIndexL))<math.abs(rsi - KDELowX.get(lowXIndexR)))? lowXIndexL: lowXIndexR
        if probMode=="Nearest"
            lowProb   := KDELowY.get(nearestIndex2)
            maxLowProb := array.max(KDELowY)
        else
            lowProb   := prefixSum(KDELowYSum,nearestIndex2,KDELowYSum.size()-1)

        // Debug log
        if DEBUG and barstate.islastconfirmedhistory
            for i=0 to KDELowX.size()-1
                float curX=KDELowX.get(i)
                float curY=KDELowY.get(i)
                log.info(str.tostring(curX)+" = "+str.tostring(curY))
            log.info("High Y Sum "+str.tostring(KDEHighY.sum()))

float diffToHighKDE= math.abs(rsi - MidKDEHigh)
float diffToLowKDE = math.abs(rsi - MidKDELow)

// Draw Pivots
color curColor= na
if not na(KDELowY) and not na(KDEHighY)
    if probMode=="Nearest"
        if math.abs(lowProb - maxLowProb)< activationThreshold/50.0
            curColor:= bullishColorRSI
        if math.abs(highProb - maxHighProb)< activationThreshold/50.0
            curColor:= bearishColorRSI
    else
        if lowProb> KDELowY.sum()*(1.0 - activationThreshold)
            curColor:= bullishColorRSI
        else if highProb> KDEHighY.sum()*(1.0 - activationThreshold)
            curColor:= bearishColorRSI

float atrVal= ta.atr(50)

// Arrows
plotarrow(curColor==bullishColorRSI and barstate.isconfirmed? 1: na,"Bullish Arrows",color.new(bullishColorRSI,70),color.new(bullishColorRSI,70),20,20)
plotarrow(curColor==bearishColorRSI and barstate.isconfirmed? -1: na,"Bearish Arrows",color.new(bearishColorRSI,70),color.new(bearishColorRSI,70),20,20)

// Possible pivot
plotarrow((na(curColor) and curColor[1]==bullishColorRSI and barstate.isconfirmed)?1:na,"Possible Bullish Pivot",bullishColorRSI,bullishColorRSI,20,20)
plotarrow((na(curColor) and curColor[1]==bearishColorRSI and barstate.isconfirmed)?-1:na,"Possible Bearish Pivot",bearishColorRSI,bearishColorRSI,20,20)

alertcondition(na(curColor) and curColor[1]==bullishColorRSI and barstate.isconfirmed,"Possible Bullish Pivot")
alertcondition(na(curColor) and curColor[1]==bearishColorRSI and barstate.isconfirmed,"Possible Bearish Pivot")

// Labels
if KDELabelsEnabled or RSILabelsEnabled
    var lastBullishLabel=0
    var lastBearishLabel=0

    if (na(curColor) and curColor[1]==bullishColorRSI and barstate.isconfirmed) and (bar_index-lastBullishLabel)>labelCooldown
        lastBullishLabel:= bar_index
        string txt= ""
        if RSILabelsEnabled and KDELabelsEnabled
            txt:= "RSI | "+ str.tostring(rsi,"#")+" | "+ str.tostring(lowProb*100,"#.##")+"%"
        else if RSILabelsEnabled
            txt:= "RSI | "+ str.tostring(rsi,"#")
        else
            txt:= str.tostring(rsi,"#")+"%"
        label.new(bar_index,low,txt,yloc=yloc.belowbar,color=na,style=label.style_label_up,textcolor=textColorRSI,force_overlay=true)

    if (na(curColor) and curColor[1]==bearishColorRSI and barstate.isconfirmed) and (bar_index-lastBearishLabel)>labelCooldown
        lastBearishLabel:= bar_index
        string txt2= ""
        if RSILabelsEnabled and KDELabelsEnabled
            txt2:= "RSI | "+ str.tostring(rsi,"#")+" | "+ str.tostring(highProb*100,"#.##")+"%"
        else if RSILabelsEnabled
            txt2:= "RSI | "+ str.tostring(rsi,"#")
        else
            txt2:= str.tostring(rsi,"#")+"%"
        label.new(bar_index,low,txt2,yloc=yloc.abovebar,color=na,style=label.style_label_down,textcolor=textColorRSI,force_overlay=true)

// DEBUG pivot-labels
if kdePivotLabels
    string txt3= str.tostring(rsi,"#.##")+"\nHP -> "+str.tostring(highProb,"#.##")+"\nLP -> "+str.tostring(lowProb,"#.##")+"\n\nMHP -> "+str.tostring(maxHighProb,"#.##")+"\nMLP -> "+str.tostring(maxLowProb,"#.##")
    if math.abs(lowProb-maxLowProb)<activationThreshold
        label.new(bar_index,high,txt3,yloc=yloc.belowbar,color=textColorRSI,style=label.style_label_up,textcolor=color.black,force_overlay=true)
    if math.abs(highProb-maxHighProb)<activationThreshold
        label.new(bar_index,high,txt3,yloc=yloc.abovebar,color=textColorRSI,style=label.style_label_down,textcolor=color.black,force_overlay=true)

if realPivotLabels
    if not na(highPivot)
        string txt4= str.tostring(rsi[highPivotLen],"#.##")+"\nHP -> "+str.tostring(highProb[highPivotLen],"#.##")+"\nLP -> "+str.tostring(lowProb[highPivotLen],"#.##")+"\n\nMHP -> "+str.tostring(maxHighProb[highPivotLen],"#.##")+"\nMLP -> "+str.tostring(maxLowProb[highPivotLen],"#.##")
        label.new(bar_index-highPivotLen,high,txt4,yloc=yloc.abovebar,color=textColorRSI,style=label.style_label_down,textcolor=color.black,force_overlay=true)
    if not na(lowPivot)
        string txt5= str.tostring(rsi[lowPivotLen],"#.##")+"\nHP -> "+str.tostring(highProb[lowPivotLen],"#.##")+"\nLP -> "+str.tostring(lowProb[lowPivotLen],"#.##")+"\n\nMHP -> "+str.tostring(maxHighProb[lowPivotLen],"#.##")+"\nMLP -> "+str.tostring(maxLowProb[lowPivotLen],"#.##")
        label.new(bar_index-lowPivotLen,high,txt5,yloc=yloc.belowbar,color=textColorRSI,style=label.style_label_up,textcolor=color.black,force_overlay=true)

// Table
if tableEnabled
    var table realtimeTable= table.new(f_getPosition(tableLocation),2,10,bgcolor=screenerColor,frame_width=2,frame_color=frameColor,border_width=1,border_color=borderColor)
    // Header
    table.merge_cells(realtimeTable,0,0,1,0)
    table.cell(realtimeTable,0,0,"KDE Optimized RSI",text_color=textColorDB,bgcolor=screenerColor)
    // RSI
    table.cell(realtimeTable,0,1,"RSI",text_color=textColorDB,bgcolor=screenerColor)
    table.cell(realtimeTable,1,1,str.tostring(rsi,"#"),text_color=textColorDB,bgcolor=screenerColor)
    // KDE
    table.cell(realtimeTable,0,2,(lowProb>highProb)? "Bullish KDE":"Bearish KDE",text_color=(lowProb>highProb)?bullishColorRSI:bearishColorRSI,bgcolor=screenerColor)
    table.cell(realtimeTable,1,2,str.tostring(nz(math.max(highProb,lowProb),0)*100,"#.##")+"%",text_color=textColorDB,bgcolor=screenerColor)
